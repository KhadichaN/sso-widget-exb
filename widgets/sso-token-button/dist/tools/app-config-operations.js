System.register(["jimu-core","jimu-ui"],(function(e,t){var i={},o={};return{setters:[function(e){i.dataSourceUtils=e.dataSourceUtils,i.expressionUtils=e.expressionUtils},function(e){o.utils=e.utils}],execute:function(){e((()=>{var e={244:e=>{"use strict";e.exports=i},321:e=>{"use strict";e.exports=o}},t={};function n(i){var o=t[i];if(void 0!==o)return o.exports;var s=t[i]={exports:{}};return e[i](s,s.exports,n),s.exports}n.d=(e,t)=>{for(var i in t)n.o(t,i)&&!n.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.p="";var s={};return n.p=window.jimuConfig.baseUrl,(()=>{"use strict";n.r(s),n.d(s,{default:()=>i});var e=n(244),t=n(321);class i{constructor(){this.id="sso-token-button-app-config-operation"}useDataSourceWillChange(t,i,o){var n,s;const r=t.widgets[this.widgetId],a=r.config.functionConfig;if(!a||!i||!o)return t;let u;if(e.dataSourceUtils.areDerivedFromSameMain(i,o))u=a.set("textExpression",e.expressionUtils.replaceDataSourceId(a.textExpression,i,o)).set("toolTipExpression",e.expressionUtils.replaceDataSourceId(a.toolTipExpression,i,o)).setIn(["linkParam","expression"],e.expressionUtils.replaceDataSourceId(null===(n=a.linkParam)||void 0===n?void 0:n.expression,i,o));else{r.useDataSources.find((e=>e.dataSourceId===i))&&(u=a.without("textExpression").without("toolTipExpression").set("linkParam",null===(s=a.linkParam)||void 0===s?void 0:s.without("expression")))}if(u){return t.setIn(["widgets",this.widgetId,"config","functionConfig"],u)}return t}afterWidgetCopied(i,o,n,s,r){if(!r)return s;let a=s;const u=o.widgets[i],p=null==u?void 0:u.config,l=p.functionConfig.linkParam,{linkParam:c,isChanged:d}=t.utils.mapLinkParam(r,l);d&&(a=a.setIn(["widgets",n,"config","functionConfig","linkParam"],c));const f=p.functionConfig.textExpression,x=e.expressionUtils.mapExpression(r,f);a=x.isChanged?a.setIn(["widgets",n,"config","functionConfig","textExpression"],x.expression):a;const g=p.functionConfig.toolTipExpression,m=e.expressionUtils.mapExpression(r,g);return a=m.isChanged?a.setIn(["widgets",n,"config","functionConfig","toolTipExpression"],m.expression):a,a}}})(),s})())}}}));