System.register(["jimu-core","jimu-ui"],(function(e,i){var t={},o={};return{setters:[function(e){t.dataSourceUtils=e.dataSourceUtils,t.expressionUtils=e.expressionUtils},function(e){o.utils=e.utils}],execute:function(){e((()=>{var e={244:e=>{"use strict";e.exports=t},321:e=>{"use strict";e.exports=o}},i={};function s(t){var o=i[t];if(void 0!==o)return o.exports;var n=i[t]={exports:{}};return e[t](n,n.exports,s),n.exports}s.d=(e,i)=>{for(var t in i)s.o(i,t)&&!s.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:i[t]})},s.o=(e,i)=>Object.prototype.hasOwnProperty.call(e,i),s.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.p="";var n={};return s.p=window.jimuConfig.baseUrl,(()=>{"use strict";s.r(n),s.d(n,{default:()=>t});var e=s(244),i=s(321);class t{constructor(){this.id="sso-token-app-config-operation"}setWidgetId(e){this.widgetId=e}useDataSourceWillChange(i,t,o){var s,n;const r=i.widgets[this.widgetId],a=r.config.functionConfig;if(!a||!t||!o)return i;let u;if(e.dataSourceUtils.areDerivedFromSameMain(t,o))u=a.set("textExpression",e.expressionUtils.replaceDataSourceId(a.textExpression,t,o)).set("toolTipExpression",e.expressionUtils.replaceDataSourceId(a.toolTipExpression,t,o)).setIn(["linkParam","expression"],e.expressionUtils.replaceDataSourceId(null===(s=a.linkParam)||void 0===s?void 0:s.expression,t,o));else{r.useDataSources.find((e=>e.dataSourceId===t))&&(u=a.without("textExpression").without("toolTipExpression").set("linkParam",null===(n=a.linkParam)||void 0===n?void 0:n.without("expression")))}return u?i.setIn(["widgets",this.widgetId,"config","functionConfig"],u):i}afterWidgetCopied(t,o,s,n,r){if(!r)return n;let a=n;const u=o.widgets[t],p=null==u?void 0:u.config,l=p.functionConfig.linkParam,{linkParam:c,isChanged:d}=i.utils.mapLinkParam(r,l);d&&(a=a.setIn(["widgets",s,"config","functionConfig","linkParam"],c));const f=p.functionConfig.textExpression,g=e.expressionUtils.mapExpression(r,f);g.isChanged&&(a=a.setIn(["widgets",s,"config","functionConfig","textExpression"],g.expression));const x=p.functionConfig.toolTipExpression,m=e.expressionUtils.mapExpression(r,x);return m.isChanged&&(a=a.setIn(["widgets",s,"config","functionConfig","toolTipExpression"],m.expression)),a}}})(),n})())}}}));